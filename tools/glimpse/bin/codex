#!/usr/bin/env python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

from glimpse import util
import math
import numpy as numpy
np = numpy  # use numpy and np to allow flexibility in command string argument
from numpy import *
import os
import re
import sys

def GetShape(obj):
  s = ""
  if isinstance(obj, BitsetArray):
    s += "Type: BitsetArray\n"
    s += "array shape: %s\n" % (obj.shape,)
    s += "bitset shape: %s\n" % (obj.bitset_shape,)
  elif hasattr(obj, 'shape'):
    s += "Type: array\n"
    s += "shape: %s\n" % (obj.shape,)
  else:
    s += "Don't know how to print shape of object with type: %s" % type(obj)
  return s

load = util.Load
store = util.Store

def main():
  # Must bind all variable names not defined locally. Otherwise, we can't use
  # "bare" exec statement below.
  global load, store, util, core, math, numpy, np, os, re, sys
  as_array = False
  begin_cmd = None
  cmd = None
  cmd_is_statement = False
  end_cmd = None
  pickle_result = False
  input_encoding = util.ENCODING_PICKLE
  output_encoding = util.ENCODING_FREE_TEXT
  packages = []
  silent = False
  opts, args = util.GetOptions("ab:c:e:hi:o:p:qs", [])
  for opt,arg in opts:
    if opt == '-a':
      as_array = True
    elif opt == '-b':
      begin_cmd = arg
    elif opt == '-c':
      cmd = arg
    elif opt == '-e':
      end_cmd = arg
    elif opt == '-h':
      raise util.UsageException
    elif opt == '-i':
      input_encoding = arg.lower()
    elif opt == '-o':
      output_encoding = arg.lower()
    elif opt == '-p':
      packages += [ s.strip() for s in arg.split(",") ]
    elif opt == '-q':
      silent = True
    elif opt == '-s':
      cmd_is_statement = True
  fnames = map(lambda f: (f == "-" and sys.stdin or f), args )
  if len(fnames) < 1:
    fnames = [ sys.stdin ]
  # Do preprocessing activities
  for p in packages:
    exec "import %s" % p
  if begin_cmd != None:
    # Evaluate the BEGIN command before processing the input array.
    try:
      exec begin_cmd
    except Exception, e:
      print >>sys.stderr, "Error evaluating BEGIN command: %s" % e
      sys.exit(-1)
  _idx = 0
  for obj in util.LoadAll(fnames, input_encoding):
    o = obj
    if as_array:
      # Evaluate command on each element of input array.
      array = obj
      for obj in array:
        o = obj
        if cmd:
          # Evaluate the command
          if cmd_is_statement:
            exec cmd
            result = o
          else:
            result = eval(cmd)
        else:
          result = obj
        if not (result == None or silent):
          util.Store(result, sys.stdout, output_encoding)
        _idx += 1
    else:
      # Evaluate command once on the entire input array.
      if cmd:
        if cmd_is_statement:
          exec cmd
          result = o
        else:
          result = eval(cmd)
      else:
        result = obj
      if not (result == None or silent):
        util.Store(result, sys.stdout, output_encoding)
      _idx += 1

  if end_cmd != None:
    # Evaluate the END command after processing the input array.
    try:
      exec end_cmd
    except Exception, e:
      print >>sys.stderr, "Error evaluating END command: %s" % e
      sys.exit(-1)

if __name__ == '__main__':
  try:
    main()
  except util.UsageException as e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage("[options] [FILE ...]\n"
      "    -a       Treat each input object as an array, over which whose elements are iterated\n"
      "    -b CMD   Run CMD before iterating over object(s)\n"
      "    -c CMD   Apply CMD to unpickled objects,\n"
      "             where 'o' is the current object and 'idx' is the current index.\n"
      "    -e CMD   Run CMD after iterating over object(s)\n"
      "    -i TYPE  Use encoding TYPE for input stream(s) -- (%s) pickle, (%s) csv text,\n" % \
          (util.ENCODING_PICKLE, util.ENCODING_CSV) + \
      "             (%s) summary text\n" % util.ENCODING_FREE_TEXT + \
      "    -o TYPE  Use encoding TYPE for output stream\n"
      "    -p PKGS  Import the comma-delimited list PKGS of python packages\n"
      "    -q       Be quiet -- don't write result to output\n"
      "    -s       Treat (-c) command as a statement, not an expression"
    )

