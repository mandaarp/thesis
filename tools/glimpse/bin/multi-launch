#!/bin/bash

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Launch a given command N times in background processes, waiting for results.
# Each sub-process is handed a different split of the input argument list.
# CMD may have xargs flags prepended -- e.g.,
#    -I STR $CMD
# will replace STR in $CMD with the current input argument, and
#    --verbose
# will print the command before xargs runs it.
# This is similar to the 'xargs -p PROCS' command, with the additional expansion
# of an index variable '$i'.
# Per-process output is buffered to avoid corruption due to asynchronous writes.
#

NUM_PROCS=2
VERBOSE=0

while getopts "n:v" F; do
  case $F in
    "n" )
      NUM_PROCS=$OPTARG
      ;;
    "v" )
      VERBOSE=1
  esac
done

# Strip off optional arguments
shift $((OPTIND-1))

if [[ "$#" -lt 1 ]]; then
  echo "usage: $0 [options] CMD [...] < INPUT-LIST" 1>&2
  echo "options:" 1>&2
  echo "  -n NUM   Run NUM concurrent transform processes (default is 2)." 1>&2
  echo "  -v       Use verbose logging." 1>&2
  exit -1
fi

D=$(dirname $0)
CMD="$@"

# Make temp dir and remove it on exit
PROC_DIR=$(mktemp -d .multi-launch-XXXXXXXX) || exit -1
trap "{ rm -fr $PROC_DIR; }" EXIT

$D/np-split -I c -O c -s -n $NUM_PROCS $PROC_DIR || exit -1
PROCS=$(for F in $(ls $PROC_DIR/*); do echo $(basename $F); done)
for PROC in $PROCS; do
  BASE=$PROC_DIR/$PROC
  i=$PROC
  EXPAND_CMD=$(eval echo $CMD)
  if [[ "$VERBOSE" == "1" ]]; then
    echo $EXPAND_CMD $(cat $PROC_DIR/$PROC) 1>&2
  fi
  $EXPAND_CMD $(cat $PROC_DIR/$PROC) > $PROC_DIR/result-$PROC &
done
wait

cat $PROC_DIR/result-*
