#!/bin/bash

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Given (binary class) labelled training images, transform all training 
# examples through C1, and learn SVM model.
#

D=$(dirname $0)

set -e

if [[ "$#" != 4 ]]; then
  echo "usage: $0 OPTIONS-FILE POS-IMAGE-DIR NEG-IMAGE-DIR XFORM-DIR" \
    1>&2
  exit -1
fi

OPTIONS_FILE=$1
POS=$2
NEG=$3
RESULTS=$4

# Setup results directory
function Setup {
  echo "Setting up xform directory: $RESULTS"
  mkdir -p $RESULTS
  # Options file may be plain text, so we convert it here
  python -c "from glimpse import core, util; util.Store(core.LoadOptions('$OPTIONS_FILE'))" \
    > $RESULTS/options
  mkdir -p $RESULTS/features/{pos,neg}
  for F in $POS/*; do echo $(basename $F); done > $RESULTS/pos-files
  ( cd $RESULTS/features/pos; xargs mkdir < ../../pos-files )
  for F in $NEG/*; do echo $(basename $F); done > $RESULTS/neg-files
  ( cd $RESULTS/features/neg; xargs mkdir < ../../neg-files )
}

# Compute C1 activity
function ComputeC1Activity {
  echo "Computing C1 activity for training images"
  export TRANSFORM_ARGS="-o $RESULTS/options -l c1 -s c1-activity "
  $D/transform-dir -q $POS $RESULTS/features/pos < $RESULTS/pos-files
  $D/transform-dir -q $NEG $RESULTS/features/neg < $RESULTS/neg-files
  for F in pos neg; do
	while read G; do
		$D/np-concat -l $RESULTS/features/$F/$G/scale{0..3}-c1-activity 
		| $D/codex -o p -c 'util.ArrayListToVector(o)'
	done \
	  < $RESULTS/$F-files \
	  | $D/np-concat -s \
	  > $RESULTS/$F-features.dat
  done
}

function TrainSvm {
  echo "Training linear SVM model"
  $D/np-to-svm $RESULTS/pos-features.dat $RESULTS/neg-features.dat \
    > $RESULTS/train.svm
  svm-scale -s $RESULTS/svm.scale-params $RESULTS/train.svm \
    > $RESULTS/scaled-train.svm
  svm-train -s 0 -t 0 $RESULTS/scaled-train.svm $RESULTS/svm.model \
    > $RESULTS/svm.log
}

function TestSvm {
  echo "Testing SVM on positive training images"
  for IMAGE in $POS/*; do
    # Apply SVM using entire image as input.
    $D/petacat-apply-c1 $RESULTS $IMAGE 0 0 0 0
  done
  echo "Testing SVM on negative training images"
  for IMAGE in $NEG/*; do
    # Apply SVM using entire image as input.
    $D/petacat-apply-c1 $RESULTS $IMAGE 0 0 0 0
  done
}

Setup
ComputeC1Activity
TrainSvm
TestSvm
