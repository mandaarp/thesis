#!/bin/bash

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage terms.

#
# Apply linear SVM to given training data. Output is train and test accuracies.
# Assumes the "svm-scale" command is present, regardless of whether package type
# is LIBSVM.
# Output is: TRAIN-ACC, TEST-ACC, TRAIN-AUC, TEST-AUC, TRAIN-DPRIME, TEST-DPRIME
# where ACC, AUC, and DPRIME are accuracy, area under ROC curve, and d' measure,
# respectively.
#
# XXX Reporting results as a line of space-delimited numbers is error prone.
# Change this to print one line per number, with header. For example:
#   SVM_TEST_ACCURACY: 0.82
#
# Requires LIBSVM to be built in the glimpse-project/libs directory.
#

set -e

D=$(dirname $0)
TYPE="SVM-LIGHT"
BIASED=0
EXTRA_RESULTS=0
OPTIMIZED=0
while getopts "beot:u" F; do
  case $F in
    "b" )
      BIASED=1
      ;;
    "e" )
      EXTRA_RESULTS=1
      ;;
    "o" )
      OPTIMIZED=1
      ;;
    "t" )
      TYPE=$OPTARG
      ;;
    "u" )
      BIASED=0
      ;;
  esac
done

# Strip off optional arguments
shift $((OPTIND-1))

if [[ "$#" < 5 ]]; then
  echo "usage: $0 [options] TRAIN-POS.dat TRAIN-NEG.dat TEST-POS.dat TEST-NEG.dat RESULT-DIR" 1>&2
  echo "options:" 1>&2
  echo "  -b       Learn a biased classifier." 1>&2
  echo "  -e       Report extended results (AUC, d')." 1>&2
  echo "  -o       Enable optimization of SVM cost parameter" 1>&2
  echo "  -t TYPE  Use package TYPE [one of LIBSVM, SVM-LIGHT]" 1>&2
  echo "  -u       Learn an unbiased classifier (the default)." 1>&2
  echo "Output is single line with format:" 1>&2
  echo "  TRAIN-ACCURACY TEST-ACCURACY TRAIN-ROC-AUC TEST-ROC-AUC" 1>&2
  echo "where XXX-ROC-AUC is the area under the ROC curve." 1>&2
  exit -1
fi

POS_TRAIN=$1
NEG_TRAIN=$2
POS_TEST=$3
NEG_TEST=$4
RESULT_DIR=$5

mkdir -p $RESULT_DIR 2>/dev/null || true

$D/np-to-svm $POS_TRAIN $NEG_TRAIN > $RESULT_DIR/train.svm
$D/np-to-svm $POS_TEST $NEG_TEST > $RESULT_DIR/test.svm
svm-scale -s $RESULT_DIR/svm.scale-params $RESULT_DIR/train.svm > $RESULT_DIR/scaled-train.svm
svm-scale -r $RESULT_DIR/svm.scale-params $RESULT_DIR/test.svm > $RESULT_DIR/scaled-test.svm

if [[ $TYPE == "LIBSVM" ]]; then
  # Find useful cost parameter and train, using biased linear SVM.
  if [[ $OPTIMIZED == 1 ]]; then
    C=$($D/optimize-svm-param $RESULT_DIR/scaled-train.svm)
    C_ARG="-c $C"
  else
    C_ARG=""
  fi
  if [[ $BIASED == 1 ]]; then
    CMD="svm-train -s 0 -t 0 $C_ARG $RESULT_DIR/scaled-train.svm $RESULT_DIR/svm.model"
  else
    CMD="svm-train-unbiased -s 0 -t 0 $C_ARG $RESULT_DIR/scaled-train.svm $RESULT_DIR/svm.model"
  fi
  $CMD > $RESULT_DIR/model.log
  for F in train test; do
    svm-predict $RESULT_DIR/scaled-$F.svm $RESULT_DIR/svm.model $RESULT_DIR/scaled-$F.out > $RESULT_DIR/$F.log
    awk '{if(NR==1){ printf substr($3, 0, length($3)-1) / 100.0 " "}}' $RESULT_DIR/$F.log
  done

elif [[ $TYPE == "SVM-LIGHT" ]]; then
  if [[ $BIASED == 1 ]]; then
    CMD="svm_learn -z c -t 0 $RESULT_DIR/scaled-train.svm $RESULT_DIR/svm.model"
  else
    CMD="svm_learn -z c -t 0 -b 0 $RESULT_DIR/scaled-train.svm $RESULT_DIR/svm.model"
  fi
  $CMD > $RESULT_DIR/model.log
  for F in train test; do
    svm_classify $RESULT_DIR/scaled-$F.svm $RESULT_DIR/svm.model $RESULT_DIR/scaled-$F.out > $RESULT_DIR/$F.log
    awk '{if(NR==4){ printf substr($5, 0, length($5)-1) / 100.0 " " }}' $RESULT_DIR/$F.log
  done

else
  echo "Unknown SVM type: $TYPE" 1>&2
  exit -1
fi

if [[ $EXTRA_RESULTS == 1 ]]; then

  if [[ $(python -c 'import scipy' 2>&1 | grep 'ImportError') == "" ]]; then

    # Compute ROC curve
    for G in scaled-{train,test}; do
      for C in "+1" "-1"; do
        $D/svm-to-np $C < $RESULT_DIR/$G.svm \
        | svm-evaluate -t $TYPE -o c $RESULT_DIR/svm.model \
        | while read F; do echo "$C" "$F"; done
      done | $D/compute-roc -o c -v 1>$RESULT_DIR/$G.roc 2>$RESULT_DIR/$G.auc
    done
    echo -n $(cut -d' ' -f 2 $RESULT_DIR/scaled-{train,test}.auc) ""

    # Compute d' measures
    for G in $RESULT_DIR/scaled-{train,test}; do
      cut -d' ' -f 1 $G.svm \
      | paste - $G.out \
      | $D/d-prime
    done | xargs echo

  else
    # Scipy package unavailable.
    echo
  fi
else
  echo
fi
