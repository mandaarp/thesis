#!/usr/bin/python

import Image
import os
import sys
from glimpse import core
from glimpse import util
from glimpse.util import kernel

LAYERS = ('r', 's1', 'c1', 's2', 'c2', 'it')
ALL_STORE_ELEMENTS = set(('options', 'r-activity', 's1-kernel', 's1-activity',
    'c1-activity', 'c1-coords', 's2-activity', 'c2-activity', 'c2-coords',
    'it-activity', 'it-coords', 'feature-vector'))
VIZ_STORE_ELEMENTS = set(('options', 'c1-activity', 'c1-coords', 'c2-coords',
    'it-activity', 'it-coords', 'feature-vector'))

def MakeOptions(**args):
  options = {
    'sse_enabled' : core.GetUseSSE(),
    'retina_kwidth' : 15,
    's1_bias' : 1.0, 
    's1_beta' : 1.0,
    's1_scaling' : 2.0,
    'c1_kwidth' : 5,
    'c1_scaling' : 2.0,
    's2_scaling' : 2.0,
  }
  # Use default options, over-writing with user options.
  return dict(options.items() + args.items())

def LoadOptions(fname):
  """Loads option data either from a python file (with name ending in ".py"),
  or a pickled dictionary."""
  options = MakeOptions()
  if fname.endswith('.py'):
    # Evaluate python source file, using options dictionary as namespace.
    execfile(fname, {}, options)
  else:
    user_options = util.Load(fname, util.ENCODING_PICKLE)
    # Use default options, over-writing with user options. 
    options = dict(options.items() + user_options.items())
  return options

import time
class Timer:
  def __init__(self, name, enabled = True):
    self.start = None
    self.name = name
    self.enabled = enabled
  def __enter__(self):
    self.start = time.time()
  def __exit__(self, type, value, traceback):
    stop = time.time()
    if self.enabled:
      print "TIME(%s): %.4f secs" % (self.name, stop - self.start)

def Transform(img_fname, layers, options, s2_prototypes, use_timer):
  core.SetUseSSE(options['use_sse'])
  results = dict()
  results['options'] = options
  if 'r' not in layers: return results
  with Timer("img", use_timer):
    img = util.LoadImageFromFile(img_fname)
  with Timer("retina", use_timer):
    retina = core.BuildRetinaFromImage(img, **options)
  results['r-activity'] = retina
  if 's1' not in layers: return results
  s1_kernels = kernel.MakeGaborKernels(**options)
  results['s1-kernel'] = s1_kernels
  with Timer("s1", use_timer):
    s1 = core.BuildS1FromRetina(retina, s1_kernels, 
        **options)
  results['s1-activity'] = s1
  if 'c1' not in layers: return results
  with Timer("c1", use_timer):
    c1, c1_coords = core.BuildC1FromS1(s1, **options)
  results['c1-activity'] = c1
  results['c1-coords'] = c1_coords
  if 's2' not in layers: return results
  with Timer("s2", use_timer):
    s2 = core.BuildS2FromC1(c1, s2_prototypes, **options)
  results['s2-activity'] = s2
  if 'c2' not in layers: return results
  c2, c2_coords = core.BuildC2FromS2(s2, **options)
  results['c2-activity'] = c2
  results['c2-coords'] = c2_coords
  return results

def main():
  opts, args = util.GetOptions("l:m:o:p:s:t")
  proto_fname = None
  use_timer = False
  options = MakeOptions()
  # mapping = None
  store_list = set(VIZ_STORE_ELEMENTS)
  layers = LAYERS
  for opt,arg in opts:
    if opt == '-l':
      layers = LAYERS[ : LAYERS.index(arg)+1 ]
    # elif opt == '-m':
      # mapping = util.Load(arg)
    elif opt == '-o':
      options = LoadOptions(arg)
    elif opt == '-p':
      proto_fname = arg
    elif opt == '-s':
      if arg == "all":
        store_list = ALL_STORE_ELEMENTS
      elif arg == "viz":
        store_list = VIZ_STORE_ELEMENTS
      else:
        store_list = set(x.lower() for x in arg.split(","))
        if not store_list.issubset(ALL_STORE_ELEMENTS):
          raise util.UsageException("User specified invalid storage (-s) elements: %s" % \
                                    ",".join(store_list.difference(ALL_STORE_ELEMENTS)))
    elif opt == '-t':
      use_timer = True
  if len(args) < 2:
    raise util.UsageException()
  img_fname, result_dir = args[:2]
  protos = None
  if proto_fname != None:
    protos = util.Load(proto_fname)
  elif 's2' in layers:
    raise util.UsageException("S2 prototypes required to transform through S2 layer")
  with Timer("Total Time", use_timer):
    results = Transform(img_fname, layers, options, protos, use_timer)
  for k in store_list.intersection(results.keys()):
    util.Store(results[k], os.path.join(result_dir, k))

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage("[options] IMAGE RESULT-DIR\n" + \
        "  -l LAYR  Transform image through layer LAYR (one of r, s1, c1, s2, c2)\n" + \
#        "  -m PATH  Mapping from C1/C2/IT to classifier feature vector (defaults to using all IT units)\n" + \
        "  -o PATH  Path to options file\n" + \
        "  -p PATH  Path to S2 prototypes\n" + \
        "  -s STR   Select layer information to be stored -- given by comma-seperated STR \n" + \
        "           (legal values: %s)\n" % ", ".join(ALL_STORE_ELEMENTS) + \
        "           can also be special value 'viz' or 'all' for data required for visualization and all data, respectively (default: viz)\n" + \
        "  -t       Print timing information"
    )
