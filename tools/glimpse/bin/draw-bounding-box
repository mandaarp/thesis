#!/usr/bin/python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Visualize a bounding box given by points in layer-dependent coordinate
# system.
#

import Image
import numpy as np
from glimpse import util
from glimpse import core
import sys

DEFAULT_LAYER = "c1"
LAYER_NAMES = ("i", "r", "s1", "c1", "s2", "c2")

# Controls the brightness of the red square that is drawn on the image.
MASK_ALPHA = 0.5

def GetLayer(ilayer, rlayer, layer_name, options, s2_protos):
  if layer_name == "i":
    return ilayer
  if layer_name == "r":
    return rlayer
  s1_kernels = core.MakeS1Kernels(options)
  s1 = core.BuildS1FromRetina(rlayer, s1_kernels, options)
  if layer_name == "s1":
    return s1
  c1, c1_coords = core.BuildC1FromS1(s1, options)
  if layer_name == "c1":
    return c1
  s2 = core.BuildS2FromC1(c1, s2_protos, options)
  if layer_name == "s2":
    return s2
  c2, c2_coords = core.BuildC2FromS2(s2, options)
  if layer_name == "c2":
    return c2
  raise Exception("Internal error: unknown layer name (%s)" % layer_name)

def AnnotateLayer(data, y1, x1, y2, x2):
  data = data.reshape([-1] + list(data.shape[-2:]))
  # Overlay is flat red image
  overlay_data = np.zeros([3] + list(data.shape), np.uint8)
  overlay_data[0] = 255
  overlay_data = np.rollaxis(overlay_data, 0, len(data.shape) + 1)
  overlay_data = overlay_data.reshape([-1] + list(overlay_data.shape[-2:]))
  overlay = Image.fromarray(overlay_data, 'RGB')
  # Mask is bounding box
  mask_data = np.empty(data.shape, np.uint8)
  mask_data[:] = 255
  mask_data[:, y1:y2, x1:x2] = 255 * (1 - MASK_ALPHA)
  mask_data = mask_data.reshape(-1, mask_data.shape[-1])
  mask = Image.fromarray(mask_data, 'L')
  image = util.ArrayToGreyscaleImage(data)
  return Image.composite(image, overlay, mask)

def main():
  opts, args = util.GetOptions("il:o:p:s:")
  layer_name = DEFAULT_LAYER
  ofname = None
  options = None
  s2_protos = None
  display_image_layer = False
  for opt,arg in opts:
    if opt == '-i':
      display_image_layer = True
    elif opt == '-l':
      layer_name = arg
      if arg not in LAYER_NAMES:
        raise util.UsageException("Unknown layer (%s): must be one of %s" %
            (arg, LAYER_NAMES))
    elif opt == '-o':
      options = core.LoadOptions(arg)
    elif opt == '-p':
      s2_protos = util.Load(arg)
    elif opt == '-s':
      ofname = arg
  if len(args) < 6:
    raise util.UsageException()
  options = core.ExpandOptions(options)
  ifname = args[0]
  scale = int(args[1])
  coords = map(int, args[2:6])
  if layer_name in ("s2", "c2") and s2_protos == None:
    raise util.UsageException("S2 prototypes must be specified to annotate"
        " layers above C1")
  img = Image.open(ifname).convert("L")
  img = core.ScaleImage(img, scale, options)
  ilayer = util.ImageToInputArray(img)
  rlayer = core.BuildRetinaFromImage(ilayer, options)
  layer = GetLayer(ilayer, rlayer, layer_name, options, s2_protos)
  if display_image_layer:
    m = core.CoordinateMapper(options)
    f = m.GetMappingFunction(layer_name, 'image')
    coords = map(f, coords)
    image = AnnotateLayer(ilayer, *coords)
  else:
    image = AnnotateLayer(layer, *coords)
  if ofname:
    image.save(ofname)
  else:
    util.Show(image)

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage("[options] IMAGE SCALE Y1 X1 Y2 X2\n"
      "    -i          Use image layer as background instead of LAYER.\n"
      "    -l LAYER    Layer of interest (default: %s).\n" % DEFAULT_LAYER + \
      "    -o FNAME    Read options from FNAME.\n"
      "    -p FNAME    Read S2 prototypes from FNAME.\n"
      "    -s FNAME    Save annotated image to FNAME.\n"
      "for a bounding box with upper-left corner (Y1,X1) and lower-right\n"
      "corner (Y2,X2), specified in target layer coordinates. SCALE should be\n"
      "between zero and num_scales (specified in options file)."
    )
