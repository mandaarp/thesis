#!/usr/bin/python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Compute the ROC curve for some trained SVM model and set of test instances.
#

from glimpse import util
from glimpse.util.stats import CalculateRoc, CalculateRocScore
import numpy as np
import sys

def main():
  opts, args = util.GetOptions('i:o:v')
  input_encoding = util.ENCODING_CSV
  output_encoding = util.ENCODING_PICKLE
  verbose = False
  for opt,arg in opts:
    if opt == '-i':
      input_encoding = arg.lower()
    elif opt == '-o':
      output_encoding = arg.lower()
    elif opt == '-v':
      verbose = True
  data = util.Load(sys.stdin, input_encoding)

  labels, evals = data[:,0], data[:,1]
  labels = labels.astype(np.int)

  if verbose:
    score, points = CalculateRocScore(labels, evals)
    print >>sys.stderr, "AUC: %s" % score
  else:
    points = CalculateRoc(labels, evals)
  util.Store(points, sys.stdout, output_encoding)

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage(
      "[options] < LABELS-AND-DIST\n" + \
      "options:\n" + \
      "  -i TYPE  Use encoding TYPE for input stream\n" + \
      "  -o TYPE  Use encoding TYPE for output stream\n" + \
      "  -v       Be verbose, including AUC for ROC data\n" + \
      "where LABEL-AND-DIST are (instance label, distance to margin) pairs."
    )

