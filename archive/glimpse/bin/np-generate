#!/usr/bin/env python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Generate a list of values by evaluating arbitrary expressions. In the sense
# that "codex" is a list transformer and/or sink, this is a list source.
#

from glimpse import util
import re
import sys

def CheckExpression(cmd):
  if cmd:
    m = re.match(r"(\w+)\s(.*)", cmd)
    if m:
      cmd = "%s(%s)" % (m.group(1), m.group(2))
  return cmd

def main():
  # Must bind all variable names not defined locally. Otherwise, we can't use
  # "bare" exec statement below.
  from glimpse import core
  load = util.Load
  store = util.Store
  import math, numpy
  np = numpy
  global sys

  begin_cmd = None
  pickle_result = False
  output_encoding = util.ENCODING_PICKLE
  packages = []
  silent = False
  opts, args = util.GetOptions("ab:c:hi:o:p:s", [])
  for opt,arg in opts:
    if opt == '-b':
      begin_cmd = arg
    elif opt == '-h':
      raise util.UsageException
    elif opt == '-o':
      output_encoding = arg.lower()
    elif opt == '-p':
      packages += [ s.strip() for s in arg.split(",") ]
    elif opt == '-s':
      silent = True
  exprs = map(CheckExpression, args)
  if len(exprs) < 1:
    raise util.UsageException()
  for p in packages:
    # Import requested packages into the global namespace.
    i = p.find("=")
    if i > 0:
      exec "import %s as %s" % (p[:i], p[i+1:])
    else:
      exec "import %s" % p
  if begin_cmd != None:
    # Evaluate the BEGIN command before processing the input array.
    try:
      exec begin_cmd
    except Exception, e:
      print >>sys.stderr, "Error evaluating BEGIN command: %s" % e
      sys.exit(-1)
  idx = 0
  for expr in exprs:
    result = eval(expr)
    if not (result == None or silent):
      util.Store(result, sys.stdout, output_encoding)
    idx += 1

if __name__ == '__main__':
  try:
    main()
  except util.UsageException as e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage("[options] EXPR [...]\n" + \
      "    -b CMD   Run CMD before evaluating experession(s)\n" + \
      "    -o TYPE  Use encoding TYPE for output stream (default: pickle)\n" + \
      "    -p PKGS  Import the comma-delimited list of python packages\n" + \
      "    -s       Be silent -- don't store result"
    )

