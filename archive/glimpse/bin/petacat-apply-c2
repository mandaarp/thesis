#!/bin/bash

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Apply a set of prototypes and svm model to a new instance, returning
# classification confidence.
#

if [[ "$#" -lt 6 ]]; then
  echo "usage: $0 XFORM-DIR IMAGE X-OFFSET Y-OFFSET WIDTH HEIGHT [DEBUG]" 1>&2
  exit -1
fi

RESULTS=$1
IMAGE=$2
XOFF=$3
YOFF=$4
WIDTH=$5
HEIGHT=$6
if [[ "$#" -gt 6 ]]; then
  DEBUG=1
else
  DEBUG=0
fi

# Make temp dir and remove it on exit
PROC_DIR=$(mktemp -d .multi-launch-XXXXXXXX) || exit -1
trap "{ rm -fr $PROC_DIR; }" EXIT

if [[ "$WIDTH" == 0 || "$HEIGHT" == 0 ]]; then
  # Width or height is zero, not cropping image
  cp "$IMAGE" "$PROC_DIR/image.png"
else
  python -c "import Image; Image.open('$IMAGE').crop(($XOFF, $YOFF, $XOFF + $WIDTH, $YOFF + $HEIGHT)).save('$PROC_DIR/image.png')"
fi

if [[ "$DEBUG" == 1 ]]; then
  python -c "import Image; Image.open('$IMAGE').show()"
  python -c "import Image; Image.open('$PROC_DIR/image.png').show()"
fi

transform -o $RESULTS/options -l it -s feature-vector -p $RESULTS/s2.protos \
    $PROC_DIR/image.png $PROC_DIR

# Scale features based on SVM training set. Reshape so result is a (singleton)
# list of feature vectors.
awk '{if(NR>1){print $2,$3}}' $RESULTS/svm.scale-params \
  | codex -i c -o p -b "ftrs = load('$PROC_DIR/feature-vector')" \
          -c '(2 * (ftrs - o[:,0]) / (o[:,1] - o[:,0]) - 1).reshape(1, -1)' \
  | svm-evaluate -t LIBSVM $RESULTS/svm.model -o c
