#!/usr/bin/python

# Demo script to show the approximate equivalence between the response of scaled
# Gabors to a single input image vs the response of a single-scale Gabor to
# a number of down-sampled version of an input image.

from glimpse.backends.cython_backend import CythonBackend
from glimpse.models import viz2
from glimpse import util
from glimpse.util import gimage, kernel
import Image
import math
import numpy as np
import os
from scipy.ndimage.interpolation import zoom
import sys

# Mean frequency response of scaled filters
FREQS = np.array((0.37, 0.21, 0.15, 0.12))
PAD_KWIDTH = 41

def MakeMultiScaleKernels(embed_kwidth = PAD_KWIDTH):
  mks = kernel.MakeMultiScaleGaborKernels(kwidth = 11, num_scales = 4,
      num_orientations = 8, num_phases = 2, shift_orientations = True,
      scale_norm = True, embed_kwidth = embed_kwidth)
  return mks[:, 0, 0]

def MakeSingleScaleKernel():
  return MakeMultiScaleKernels(embed_kwidth = 11)[0:1]

def BuildRetinaFromFile(fname):
  img = Image.open(ifname)
  backend = CythonBackend()
  img = viz2.ImageLayerFromInputArray(img, backend)
  return backend.ContrastEnhance(img, kwidth = 15, bias = 1.0, scaling = 1)

def ApplyS1Kernels(retina, s1_kernels):
  backend = CythonBackend()
  retina_ = retina.reshape((1,) + retina.shape)
  ks = s1_kernels.reshape((-1, 1) + s1_kernels.shape[-2:]).copy()
  return backend.NormRbf(retina_, ks, bias = 1.0, beta = 1.0, scaling = 1.0)

class Display:
  def __init__(self, rdir = None, fname = None):
    self.rdir = rdir
    self.fname = fname
  def __enter__(self):
    pyplot.clf()
  def __exit__(self, type, value, traceback):
    if self.rdir != None and self.fname != None:
      savefig(os.path.join(self.rdir, self.fname))

def ResultsForMultiScaleFilters(retina, rdir = None, display = True):
  mks = MakeMultiScaleKernels()
  response_scaled_filters = np.array(ApplyS1Kernels(retina, mks))
  # Wrap maps, accounting for lost border due to convolution
  response_sf_wrap = np.array([ util.PadArray(r, retina.shape, math.exp(-2))
      for r in response_scaled_filters ])

  if display:
    with Display(rdir, "filters.png"):
      # Filters padded to %dx%d pixels" % (PAD_KWIDTH, PAD_KWIDTH)
      gplot.Show3dArray(mks, cols = 2, colorbar = True,
          titles = ["Kernel %d" % i for i in range(1,5)], show = False)
    with Display(rdir, "power spectrum - filters.png"):
      # Frequency response for scaled filters
      for i in range(4):
        gplot.ShowImagePowerSpectrum(mks[i], width = 512,
            label = "Kernel %d" % (i+1))
      legend()
    with Display(rdir, "result - scaled filters.png"):
      # Response of scaled filters to original image
      gplot.Show3dArray(response_sf_wrap, cols = 2, normalize = False,
          colorbars = True, titles = ["Kernel %d" % i for i in range(1,5)],
          show = False)

  return mks, response_scaled_filters, response_sf_wrap

def ResultsForMultiScaleImages(retina, rdir = None, display = True):
  # Make unclipped single-scale filter
  k = MakeSingleScaleKernel()
  # Down-sample the input image at multiple rates to match change in relative
  # frequencies changes in scaled filters.
  images = [ zoom(retina, x / FREQS[0], prefilter = True, mode = 'nearest')
      for x in FREQS ]
  scales = [ np.array(images[i].shape, float) / np.array(retina.shape)
      for i in range(4) ]
  # Get response of single filter to multi-scale input images.
  # Apply kernels, getting result map for first scale and orientation.
  response_scaled_images = [ ApplyS1Kernels(img, k)[0] for img in images ]
  # Resize response maps to equivalent scales
  response_si_resize = [ zoom(r, 1 / s, mode = 'nearest')
      for r, s in zip(response_scaled_images, scales) ]
  # Pad response maps to have equal extents
  response_si_wrap = np.array([ util.PadArray(r, retina.shape, math.exp(-2))
      for r in response_si_resize ])

  if display:
    with Display(rdir, "power spectrum - images.png"):
      # Frequency content of scaled input images
      for i in range(4):
        gplot.ShowImagePowerSpectrum(images[i], width = 512,
            label = "Scale %d" % (i+1))
      legend()
    with Display(rdir, "effective power spectrum - single scale kernel.png"):
      # Frequency response for scaled filters
      # use low-frequency kernel for illustrative purposes
      kidx = 3
      mks = MakeMultiScaleKernels()
      freqs, power, cnts = gimage.PowerSpectrum(mks[kidx], width = 512)
      freq_scales = FREQS / FREQS[kidx]
      power_scales = np.arange(1, 5) / 4.
      for i, f, p in zip(range(4), freq_scales, power_scales):
        plot(freqs * f, power * p, label = "Scale %d" % (i+1))
      legend()
      ax = gcf().axes[0]
      ax.set_autoscalex_on(False)
      ax.set_xlim([0, 0.5])
      ax.set_yticks([])
      ax.set_xlabel("Cycles per Pixel")
      ax.set_ylabel("Power")
    with Display(rdir, "result - scaled images.png"):
      # Response of high-frequency filter to scaled images
      gplot.Show2dArrayList(response_si_wrap, cols = 2, normalize = False,
          colorbars = True, titles = ["Scale %d" % i for i in range(1,5)],
          show = False)

  return images, response_scaled_images, response_si_resize, response_si_wrap

def main(ifname, rdir):
  retina = BuildRetinaFromFile(ifname)
  with Display(rdir, "input image.png"):
    # Preprocessed image
    gplot.Show2dArray(retina, colorbar = True, show = False)

  mks, response_scaled_filters, response_sf_wrap = \
      ResultsForMultiScaleFilters(retina, rdir)
  images, response_scaled_images, response_si_resize, response_si_wrap = \
      ResultsForMultiScaleImages(retina, rdir)

  # If mks filter size is larger than multi-image kernel, crop the response of
  # single-scale kernel.
  if response_si_resize[0].shape[0] > response_scaled_filters[0].shape[0]:
    as_ = response_scaled_filters
    bs = [ util.CropArray(x, y.shape) for x, y in zip(response_si_resize,
        response_scaled_filters) ]
  else:
    as_ = [ util.CropArray(x, y.shape) for x, y in
        zip(response_scaled_filters, response_si_resize) ]
    bs = response_si_resize

  fs = [ as_[0] ] + [ r[1:] for r in as_[1:] ]
  is_ = [ bs[0] ] + [ r[:-1] for r in bs[1:] ]

  corrs = [ np.corrcoef(f.flat, i.flat)[0,1]
      for f, i in zip(fs, is_) ]

  print "Correlation between responses of scaled filters vs scaled images is:" \
      "\n%s" % corrs

  fs = [ as_[0] ] + [ r[:-1] for r in as_[1:] ]
  is_ = [ bs[0] ] + [ r[1:] for r in bs[1:] ]

  corrs = [ np.corrcoef(f.flat, i.flat)[0,1]
      for f, i in zip(fs, is_) ]

  print "Correlation between responses of scaled filters vs scaled images is:" \
      "\n%s" % corrs

  corrs = [ np.corrcoef(f.flat, i.flat)[0,1]
      for f, i in zip(as_, bs) ]

  print "Correlation between responses of scaled filters vs scaled images is:" \
      "\n%s" % corrs

  # Null-hypothesis: correlation between response maps for different filter
  # frequencies. This provides a reference for the correlation of response maps
  # across scaling methods.
  corrs_ref = np.corrcoef(response_scaled_filters.reshape(4, -1))
  print "Cross-Scale Correlation:\n%s" % corrs_ref

if __name__ == "__main__":
  # Parse command line arguments
  if len(sys.argv) < 3:
    sys.exit("usage: %s IMAGE RESULTS" % sys.argv[0])
  ifname, rdir = sys.argv[1:3]
  assert os.path.exists(rdir), "RESULTS dir must exist"
  # Initialize plotting library
  pyplot = util.InitPlot(use_file_output = True)
  from matplotlib.pyplot import *
  from glimpse.util import gplot
  # Run the demo
  gray()
  main(ifname, rdir)

else:
  # Initialize plotting library
  pyplot = util.InitPlot(use_file_output = False)
  from matplotlib.pyplot import *
  from glimpse.util import gplot
