#!/usr/bin/env python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Split input data into N segments, optionally shuffling data before the split.
#

from glimpse import util
import math
import numpy
import os.path
import sys

def main():
  opts, args = util.GetOptions('i:I:l:n:O:r:sS:w')
  if len(args) < 1:
    raise util.UsageException()
  result_dir = args[0]
  ifname = sys.stdin
  input_encoding = util.ENCODING_PICKLE
  labels = None
  num_splits = 10
  output_encoding = util.ENCODING_PICKLE
  split_indices = None
  shuffle = False
  suffix = ""
  write_indices = False
  for opt,arg in opts:
    if opt == '-i':
      ifname = arg
      if ifname == "-":
        ifname = sys.stdin
    elif opt == '-I':
      input_encoding = arg
    elif opt == '-l':
      labels = arg.split(",")
    elif opt == '-n':
      num_splits = int(arg)
    elif opt == '-O':
      output_encoding = arg
    elif opt == '-r':
      split_indices = list(util.LoadAll(arg, util.ENCODING_PICKLE))
      num_splits = len(split_indices)
    elif opt == '-s':
      shuffle = True
    elif opt == '-S':
      suffix = arg
    elif opt == '-w':
      write_indices = True

  data = util.Load(ifname, input_encoding)
  if split_indices == None:
    indices = numpy.arange(len(data))
    if shuffle:
      numpy.random.shuffle(indices)
    split_size = math.ceil(float(len(data)) / num_splits)
    split_offsets = numpy.arange(split_size, len(data), split_size)
    split_indices = [ x.reshape(-1) for x in
        numpy.split(indices.reshape(-1,1), split_offsets, 0) ]
  if labels == None:
    labels = map(str, range(num_splits))
  else:
    assert(len(labels) == num_splits), "Labels has wrong length: expected %d values, got %d" % (num_splits, len(labels))

  for label, idx, indices in zip(labels, range(num_splits), split_indices):
    ofname = os.path.join(result_dir, "%s%s" % (label, suffix))
    util.Store(data[indices], ofname, output_encoding)
    if write_indices:
      util.Store(indices, "%s.idx" % ofname, util.ENCODING_PICKLE)

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage(
      "[options] RESULT-DIR\n"
      "options:\n"
      "  -i FILE  Read data from FILE [default: '-']\n"
      "  -I FMT   Assume input has FMT encoding\n"
      "  -l LBLS  Label output files with LBLS instead of output index\n"
      "  -n NUM   Split input in NUM segments [default: 10]\n"
      "  -O FMT   Write output in FMT encoding\n"
      """  -r FILE  Read split information from FILE, which contains a stream of
           pickled 1D index arrays. Use this to split multiple corresponding
           datasets in the same way, e.g.:
             np-split -wsn 2 split1 < data
             cat split1/{0,1}.idx > idx
             np-split -wr idx split2 < data
           A diff of 'split1' and 'split2' should come back empty.\n"""
      "  -s       Shuffle data before splitting\n" + \
      "  -S SUFF  Append suffix SUFF to output file names\n" + \
      "  -w       Write indices for each segment, in addition to segment values"
    )
