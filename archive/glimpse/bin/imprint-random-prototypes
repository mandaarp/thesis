#!/usr/bin/python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Imprint S2 kernels from randomly-chosen regions of C1 activity, computed from
# a given image file.
#

from glimpse import util
from glimpse import core
import numpy
import os
import random
import sys

def GetFiles(args):
  files = []
  for d in args:
    if os.path.isdir(d):
      for f in os.listdir(d):
        files.append(os.path.join(d, f))
    else:
      files.append(d)
  return files

def main():
  opts, args = util.GetOptions('mn:o:p:P:r:sv')
  num_result_files = 10
  num_protos_per_image = None
  num_total_protos = None
  result_file = None
  multi_result_files = False
  verbose = False
  single_array = True
  options = None
  for opt,arg in opts:
    if opt == '-m':
      multi_result_files = True
    elif opt == '-n':
      num_result_files = int(arg)
      if num_result_files < 1:
        raise util.UsageException("Number of result files must be positive")
    elif opt == '-o':
      options = core.LoadOptions(arg)
    elif opt == '-p':
      num_protos_per_image = int(arg)
      if not num_protos_per_image > 0:
        raise util.UsageException("Number of prototypes must be positive")
    elif opt == '-P':
      num_total_protos = int(arg)
      if not num_total_protos > 0:
        raise util.UsageException("Number of prototypes must be positive")
    elif opt == '-r':
      result_file = arg
    elif opt == '-v':
      verbose = True
    elif opt == '-s':
      single_array = False
  if result_file == None:
    result_file = sys.stdout
  if len(args) < 1:
    raise util.UsageException("Missing input images/directories")
  if num_protos_per_image == None and num_total_protos == None:
    raise util.UsageException("Must specify number of prototypes")
  options = core.ExpandOptions(options)
  core.ApplyGlobalOptions(options)
  files = GetFiles(args)
  if num_total_protos == None:
    protos_per_image = [num_protos_per_image] * len(files)
    num_total_protos = num_protos_per_image * len(files)
  else:
    protos_per_image = util.Distribute(num_total_protos, len(files))
  assert(num_total_protos > 0), "Number of prototypes must be positive."
  num_written_protos = 0
  if single_array:
    assert(multi_result_files == False)
    cnt = 0
    read_prototypes = []
    for fname, num_prototypes_in_file in zip(files, protos_per_image):
      if num_prototypes_in_file < 1:
        continue
      if verbose:
        cnt += 1
        print "Imprint: %s cnt: %d num-protos: %d" % (fname, cnt,
            num_prototypes_in_file)
      prototypes = core.ImprintRandomS2Prototypes(fname,
          num_prototypes_in_file, options)
      read_prototypes.extend(prototypes)
    num_written_protos = len(read_prototypes)
    written_protos = core.MakeArray((num_written_protos,) +
        read_prototypes[0].shape)
    written_protos[:] = read_prototypes
    util.Store(written_protos, result_file)

  else:
    cnt = 0
    for fname, num_prototypes_in_file in zip(files, protos_per_image):
      if num_prototypes_in_file < 1:
        continue
      if verbose:
        cnt += 1
        print "Imprint: %s cnt: %d num-protos: %d" % (fname, cnt,
            num_prototypes_in_file)
      ps = core.ImprintRandomS2Prototypes(fname, num_prototypes_in_file,
          options)
      for p in ps:
        util.Store(p, result_file)
      num_written_protos += len(ps)

  assert (num_written_protos == num_total_protos), \
      "Internal error: wrote fewer prototypes than requested."

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    util.Usage("[options] IMAGE_OR_DIR ...\n" + \
        "   -m          Split results, with files named FILE.0, FILE.1, ...\n" + \
        "   -n NUM      Use NUM different result files (default: 10)\n" + \
        "   -o FILE     Path to options file\n" + \
        "   -p NUM      Imprint NUM prototypes per image\n" + \
        "   -P NUM      Imprint NUM prototypes total\n" + \
        "   -r FILE     Write results to FILE\n" + \
        "   -v          Be verbose with progress updates\n" + \
        "   -s          Write prototypes as a stream, not as one array"
        , e)

