#!/usr/bin/python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

# This script manages M jobs on N compute nodes, where M may be greater than N.
#
# This script requires the commands
#   ssh
#   scp
# to be on the local path (i.e., it must be in a directory included in the PATH
# environment variable), that this node has access to compute nodes via shared-key
# authentication, and that the login message be suppressed on remote nodes
# (e.g., using ~/.hushlogin). Also requires the 'gjob' command to be on the remote path.
#
# Note that the 'gjob' command (on the local node) can be used to interact with jobs
# launched by 'remote-job-manager' (this script).

from glimpse import util
from glimpse.util.cluster import Builder, Network, LoggingManager
import os
import sys

def main():
  opts, args = util.GetOptions('c:dr:s:v')
  cluster_fnames = None
  debug = False
  results_dir = None
  sleep_time_in_secs = 2
  verbose = False
  if 'GJOB_REMOTE_PATH' in os.environ:
    results_dir = os.environ['GJOB_REMOTE_PATH']
  for opt,arg in opts:
    if opt == '-c':
      cluster_fnames = arg
    elif opt == '-d':
      debug = True
    elif opt == '-r':
      results_dir = arg
    elif opt == '-s':
      sleep_time_in_secs = int(arg)
    elif opt == '-v':
      verbose = True
  if results_dir == None:
    raise util.UsageException("Missing results directory (-r)")
  if cluster_fnames == None:
    raise util.UsageException("Missing cluster file (-c)")
  if len(args) < 1 or args[0] == "-":
    script = sys.stdin
  else:
    script = args[0]
  # Read cluster info
  clusters = {}
  for fname in cluster_fnames.split(","):
    hosts = util.ReadLines(os.path.expanduser(fname))
    clusters[hosts[0]] = hosts[1:]
  # Read job specs from file
  builder = Builder()
  global_namespace = {
    'Job' : builder.AddJob,
    'Repeat' : builder.SetRepeat,
  }
  local_namespace = {}
  if util.IsString(script):
    execfile(script, global_namespace, local_namespace)
  else:
    exec script in global_namespace, local_namespace
  job_specs = builder.MakeJobSpecs()
  if debug:
    from pprint import pprint
    pprint(job_specs)
    return
  # Process jobs
  network = Network(results_dir, clusters, verbose = verbose)
  manager = LoggingManager(sleep_time_in_secs, sys.stdout)
  manager.Setup(job_specs, network)
  manager.ProcessJobs()
  print
  print "All jobs completed successfully"

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage(
      "[options] JOB-SPECS\n"
      "options:\n"
      "  -c FNAMES Comma-separated list of cluster file paths. File should\n"
      "            contain management node for cluster (for status updates)\n"
      "            as first line, then list of worker nodes (for launching\n"
      "            jobs) on remaining lines.\n"
      "  -d        Enable debugging mode\n"
      "  -r PATH   Set the base result directory on worker nodes to PATH\n"
      "            (reads from the GJOB_REMOTE_PATH environment variable\n"
      "            by default)\n"
      "  -s SECS   Set the time to sleep in seconds while waiting on running\n"
      "            jobs\n"
      "  -v        Be verbose with output"
    )
