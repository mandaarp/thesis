#!/usr/bin/python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

from glimpse.util.kernel import MakeRandomKernels
from glimpse.util.grandom import HistogramSampler
from glimpse import util
import math
import numpy as np
import sys

ALG_SHUFFLE = "s"
ALG_HISTOGRAM = "h"
ALG_NORMAL = "n"

ALL_ALGORITHMS = (ALG_SHUFFLE, ALG_HISTOGRAM, ALG_NORMAL)

def main():
  opts, args = util.GetOptions("a:b:f:k:m:n:Nr:s:")
  ifname = None
  algorithm = None
  nbins = 100
  normal_mean = 0
  normal_std = 1
  nkernels = 100
  kshape = None
  resolution = 0.0025
  normalize = False
  for opt,arg in opts:
    if opt == '-a':
      algorithm = arg
    elif opt == '-b':
      nbins = int(arg)
    elif opt == '-f':
      ifname = arg
    elif opt == '-k':
      kshape = tuple(map(int, arg.split(",")))
    elif opt == '-m':
      normal_mean = float(arg)
    elif opt == '-n':
      nkernels = int(arg)
    elif opt == '-N':
      normalize = True
    elif opt == '-r':
      resolution = float(arg)
    elif opt == '-s':
      normal_std = float(arg)
  if algorithm == None:
    raise util.UsageException("Missing algorithm")
  if (algorithm == ALG_SHUFFLE or algorithm == ALG_HISTOGRAM) \
      and ifname == None:
    raise util.UsageException("File of input kernels required")
  if algorithm == ALG_SHUFFLE:
    idata = util.Load(ifname)
    if nkernels > len(idata):
      raise util.UsageException("Asked for %d shuffled kernels, but only "
          "%d available" % (nkernels, len(idata)))
    indices = np.arange(len(idata))
    np.random.shuffle(indices)
    indices = indices[:nkernels]
    odata = idata[indices]
    for x in odata:
      np.random.shuffle(x)
  elif algorithm == ALG_HISTOGRAM:
    idata = util.Load(ifname)
    sampler = HistogramSampler(idata, nbins, resolution = resolution)
    kshape = np.array(idata.shape[1:])
    nelements = nkernels * kshape.prod()
    oshape = [nkernels] + list(kshape)
    odata = sampler.Sample(nelements).reshape(oshape).astype(np.float32)
  elif algorithm == ALG_NORMAL:
    if kshape == None:
      raise util.UsageException("Missing kernel shape")
    odata = MakeRandomKernels(nkernels, kshape, mean = normal_mean,
        std = normal_std, normalize = False)
  else:
    raise util.UsageException("Unknown algorithm: %s" % algorithm)
  # Normalize each kernel to have unit length.
  if normalize:
    for k in odata:
      k /= np.linalg.norm(k)
  util.Store(odata, sys.stdout)

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage(
      "[options] > RANDOM.kernels\n"
      "options:\n"
      "  -a ALG  Generate kernels using algorithm ALG\n"
      "            s - shuffle input kernels\n"
      "            h - sample from point-wise histogram of input kernels\n"
      "            n - sample from fixed normal distribution\n"
      "  -b NUM  Set number of bins for histogram of input data (default is\n"
      "          100).\n"
      "  -f FILE Read input kernels from FILE\n"
      "  -k SHP  Set the kernel shape, needed for algorithm (n)\n"
      "  -m MEAN Set the mean of the normal distribution\n"
      "  -n NUM  Set number of kernels to generate (default is 100). If ALG\n"
      "          is 's', then NUM can not be more than the number of input\n"
      "          kernels.\n"
      "  -r NUM  Set the resolution of the histogram sampler\n"
      "  -s STD  Set the standard deviation of the normal distribution"
    )

