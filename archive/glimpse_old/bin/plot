#!/usr/bin/env python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

from glimpse import util
import matplotlib
import numpy as np
import sys

# Given 2D array with records of the form
#  (num protos, perf)
# with multiple entries for each (num protos) value, return a 3D array of the
# form
#  (num_protos), (perf means), (perf stds)
# with unique (num protos) values.
def Summarize(data):
  keys = data[:, 0]
  results = []
  for key in np.unique(keys):
    subset = data[ keys == key ]
    mean = subset.mean(0)[1]
    std = subset.std(0)[1]
    results.append([ key, mean, std ])
  return np.array(results).T

def main():
  opts, args = util.GetOptions('a:c:eHi:l:o:s:St:x:y:')
  input_encoding = util.ENCODING_PICKLE
  ofname = None
  # Parse arguments needed early
  for opt,arg in opts:
    if opt == '-o':
      ofname = arg
    elif opt == '-i':
      input_encoding = arg
  if len(args) < 1:
    args = [ "-" ]
  for i in range(len(args)):
    if args[i] == "-":
      args[i] = sys.stdin
  try:
    data_sets = list(util.LoadAll(args, input_encoding))
  except Exception:
    sys.exit("Failed to load dataset, maybe wrong input type (see -i option)?")
  plot = util.InitPlot(ofname != None)
  line_args = [ {} for i in range(len(data_sets)) ]
  show_legend = False
  axis = None
  error_bars = False
  histogram = False
  scatter = False

  def add_line_arg(key, arg):
    array = arg.split(",")
    size = min(len(array), len(data_sets))
    array = array[:size]
    for i in range(len(array)):
      line_args[i][key] = array[i]

  # Parse remaining command line arguments
  for opt,arg in opts:
    if opt == '-a':
      axis = map(float, arg.split(","))
    elif opt == '-c':
      set_colors = add_line_arg('color', arg)
    elif opt == '-e':
      error_bars = True
    elif opt == '-H':
      histogram = True
    elif opt == '-l':
      set_labels = add_line_arg('label', arg)
      show_legend = True
    elif opt == '-s':
      set_styles = add_line_arg('linestyle', arg)
    elif opt == '-S':
      scatter = True
    elif opt == '-t':
      plot.title(arg)
    elif opt == '-x':
      plot.axes().set_xlabel(arg)
    elif opt == '-y':
      plot.axes().set_ylabel(arg)
  # Plot the data
  for data, line_arg in zip(data_sets, line_args):
    if error_bars:
      data = Summarize(data)
      plot.errorbar(data[0], data[1], yerr = data[2], **line_arg)
    elif histogram:
      plot.hist(data.flat, 100, **line_arg)
    elif scatter:
      data = data.T
      data.sort(0)
      plot.scatter(data[0], data[1], **line_arg)
    else:
      data.sort(0)
      data = data.T
      plot.plot(data[0], data[1], **line_arg)
  if axis != None:
    plot.axis(axis)
  if show_legend:
    plot.legend()
  if ofname == None:
    plot.show()
  else:
    plot.savefig(ofname)

if __name__ == '__main__':
  try:
    main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage(
      "[options] [DATA ...]\n" + \
      "options:\n"
      "  -a X0,X1,Y0,Y1  Set range of X and Y axes to [X0,X1] and [Y0,Y1].\n" + \
      "  -c COLORS       Specify comma-separated line colors. Ex: r, g, b.\n" + \
      "  -e              Plot 2D datasets with repeated X values by showing error bars.\n" + \
      "  -H              Plot histogram of 1D datasets.\n" + \
      "  -i TYPE         Set input encoding type [one of: %s, default: %s].\n" % (", ".join(util.INPUT_ENCODINGS), util.ENCODING_PICKLE) + \
      "  -l LABELS       Specify comma-separated line names.\n"
      "  -o FNAME        Write plot to image file FNAME.\n" + \
      "  -s STYLES       Specify comma-separated line styles. Ex: solid, '-', \n" + \
      "                  dashed, '--'.\n" + \
      "  -S              Show 2D datasets as a scatterplot.\n" + \
      "  -t TITLE        Set chart title.\n" + \
      "  -x LABEL        Set label on x-axis.\n" + \
      "  -y LABEL        Set label on y-axis.\n" + \
      "For more option values, see:\n" + \
      "  http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.plot"
    )
