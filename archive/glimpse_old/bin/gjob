#!/bin/bash

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage terms.

# This script supports interaction with local and remote jobs (i.e.,
# sets of commands).
#
# Note that remote commands assume that 'gjob' (this script) is on
# the remote path, and many expect that one or both of 'ssh' and
# 'scp' are on the local path. Additionally, the local (remote)
# 'kill' sub-command of this script expects the 'pkill' command to
# be on the local (remote) path.
#
# Remote commands require the GJOB_REMOTE_PATH environment variable to be set,
# which indicates the root path for new job directories on remote nodes.

set -e

#### COMMANDS FOR LOCAL JOBS ####

function LocalJobDelete {
  cd $1
  ls -A | xargs rm -fr
  touch DELETED
}

function LocalJobKill {
  JOB=$1
  if [[ ! -f $JOB/.pgid ]]; then
    echo "Not a job directory" 1>&2
    exit -1
  fi
  shift
  # XXX this does not work on OS X
  pkill $@ -g $(cat $JOB/.pgid)
}

function LocalJobMkdir {
  H=$(hostname -s)
  D=$(date +%Y-%m-%d)
  N=$H/$D
  if [ -e $N ]; then
    for ((F=2; $F<100; F+=1)); do
    T="$N-$F"
    if [ ! -e $T ]; then
      N=$T
      F=100
    fi
    done
  fi
  echo $N
  mkdir -p $N
}

function LocalJobStart {
  cd $1
  JOB_DIR=$PWD
  # Create the ".done" file when the process completes.
  trap "{ touch '$JOB_DIR/.done'; }" EXIT
  shift
  # Log the ID of this process. Use "$$" instead of "$BASHPID", since the
  # later does not work reliably on Mac OS X (at least on the older version of
  # bash that runs there by default).
  echo $$ > $JOB_DIR/.pid
  if [[ -d /proc ]]; then
    # Get current script's PGID
    echo $(ps -p $BASHPID h -o pgid) > $JOB_DIR/.pgid
  fi
  SYSTEM=$(uname)
  if [[ "$SYSTEM" == "Darwin" ]]; then
    # This is a hack to work around the lack of a decent "time" utility on
    # MacOS.
    # 1. start a new nice'd instance of bash
    # 2. start a subshell, whose stderr output is written to .time
    # 3. time the commands, with command's stdout/stderr captured per "$@"
    # Note that this has the drawback that all stderr output is sent to
    # ".time"!
    echo \(time "$@"\) 2\>$JOB_DIR/.time | nice bash
  else
    # The following command works better for Linux.
    nice /usr/bin/time -o $JOB_DIR/.time "$@"
  fi
}

function LocalJobStatus {
  D=$1
  echo -n "$D "
  # State strings used below are parsed by remote-job-manager.py
  if [[ -s "$D/err" ]]; then
    echo "error"
  elif [ -f "$D/.done" ]; then
    echo "done"
  elif [ -f "$D/log" ]; then
    echo "busy"
  else
    echo "unknown"
  fi
}

#### COMMANDS FOR REMOTE JOBS ####

function RemoteJobCommand {
  if [[ "$GJOB_REMOTE_PATH" == "" ]]; then
    echo "Error: GJOB_REMOTE_PATH environment variable not set." 1>&2
    exit -1
  fi
  JOB=$1
  INTERACTIVE=$2
  HOST=$(dirname $JOB)
  if [[ "$INTERACTIVE" == 1 ]]; then
    ssh -t -t $HOST "cd $GJOB_REMOTE_PATH/$JOB; bash"
  else
    # XXX assumes bash is remote shell
    (echo "set -e"
     echo "cd $GJOB_REMOTE_PATH/$JOB"
     cat
    ) | ssh -q $HOST
  fi
}

function RemoteJobKill {
  # Move up two directories, since job directory has form
  # $GJOB_REMOTE_PATH/$JOB_ID, where JOB_ID=$HOST/$DATE-$CNT.
  (echo "cd ../.."
   echo "gjob local kill $@"
  ) | RemoteJobCommand $1
}

function RemoteJobStart {
  if [[ "$GJOB_REMOTE_PATH" == "" ]]; then
    echo "Error: GJOB_REMOTE_PATH environment variable not set." 1>&2
    echo $GJOB_REMOTE_PATH
    exit -1
  fi
  if [[ "$CLUSTER" == 1 ]]; then
    HOST=$(cat $1 | shuf | head -n 1)
  else
    HOST=$1
  fi
  shift
  # Make new job directory, write commands from our stdin.
  JOB_ID=$(ssh $HOST "cd $GJOB_REMOTE_PATH \
    && F=\$(gjob local mkdir) \
    && echo \$F \
    && cat > \$F/.cmds") || exit -1
  EXP_DIR=$GJOB_REMOTE_PATH/$JOB_ID
  echo $JOB_ID
  # Copy local files to remote path.
  if [[ "$#" -gt 0 ]]; then
    scp "$@" $HOST:$EXP_DIR || exit -1
  fi
  # Launch job.
  CMD="gjob local start $EXP_DIR bash .cmds 1>$EXP_DIR/log 2>$EXP_DIR/err &"
  if [[ "$TAIL_STDOUT" == 1 ]]; then
    CMD="($CMD); tail -f $EXP_DIR/log"
  fi
  ssh -q $HOST bash -l <<<$CMD
}

#### INPUT PARSING ####

GROUP=
CMD=
if [[ "$#" > 0 ]]; then
  GROUP=$1
  if [[ "$#" > 1 ]]; then
    CMD=$2
    shift
  fi
  shift
fi

if [[ "$GROUP" == "local" ]]; then

  if [[ "$CMD" == "delete" ]]; then

    if [[ "$#" != 1 ]]; then
      echo "usage: $0 local delete JOB-DIR" 1>&2
      exit -1
    fi
    LocalJobDelete $1

  elif [[ "$CMD" == "kill" ]]; then

    if [[ "$#" -lt 1 ]]; then
      echo "usage $0 local kill JOB-DIR [KILL-ARGS]" 1>&2
      exit -1
    fi
    LocalJobKill $@

  elif [[ "$CMD" == "mkdir" ]]; then

    LocalJobMkdir

  elif [[ "$CMD" == "start" ]]; then

    if [[ "$#" -lt 2 ]]; then
      echo "usage: $0 local start JOB-DIR CMD [...]" 1>&2
      exit -1
    fi
    if [[ ! -d $1 ]]; then
      echo "JOB-DIR ($1) must exist" 1>&2
      exit -1
    fi
    LocalJobStart $@

  elif [[ "$CMD" == "status" ]]; then

    if [[ "$#" != 1 ]]; then
      echo "usage: $0 local status JOB-DIR"
      exit -1
    fi
    LocalJobStatus $1

  else
    (
    if [[ "$CMD" != "" ]]; then
      echo "Unknown command: $CMD"
    fi
    echo "usage $0 local CMD"
    echo "where CMD is one of"
    echo
    echo "  delete -- Remove job files, but leave directory so no other job"
    echo "            gets same ID. After the system clock advances to the next"
    echo "            day, it's then safe to delete this empty directory."
    echo
    echo "  kill   -- Stop (not pause) a local job, given the path to its local"
    echo "            directory."
    echo
    echo "  mkdir  -- Make a new directory for a local job. The directory name"
    echo "            is composed of the current date concatenated with an"
    echo "            incremented counter. The new directory is created in the"
    echo "            current working directory."
    echo
    echo "  start  -- Launch a new job on the local host. Note that the"
    echo "            executed CMDs are relative to the job directory."
    echo
    echo "  status -- Get the status of a job, given a path to its local"
    echo "            directory."
    echo
    ) 1>&2
    exit -1
  fi

elif [[ "$GROUP" == "remote" ]]; then

  if [[ "$CMD" == "cmd" ]]; then

    INTERACTIVE=0
    while getopts "i" F; do
      case $F in
        "i" )
          INTERACTIVE=1
          ;;
      esac
    done
    # Strip off optional arguments
    shift $((OPTIND-1))
    if [[ "$#" -lt 1 ]]; then
      echo "usage: $0 remote cmd [options] JOB-ID < CMDS" 1>&2
      echo "options:" 1>&2
      echo "  -i  Start interactive shell instead of reading batch" 1>&2
      echo "      commands from stdin" 1>&2
      exit -1
    fi
    RemoteJobCommand $1 $INTERACTIVE

  elif [[ "$CMD" == "is-paused" ]]; then

    if [[ "$#" -lt 1 ]]; then
      echo "usage: $0 remote is-paused JOB-ID" 1>&2
      exit -1
    fi
    echo "gjob local is-paused ." \
    | RemoteJobCommand $1

  elif [[ "$CMD" == "kill" ]]; then

    if [[ "$#" -lt 1 ]]; then
      echo "usage: $0 remote kill JOB-ID [KILL-ARGS]" 1>&2
      exit -1
    fi
    RemoteJobKill $@

  elif [[ "$CMD" == "pause" ]]; then

    if [[ "$#" -lt 1 ]]; then
      echo "usage: $0 remote pause JOB-ID" 1>&2
      exit -1
    fi
    RemoteJobKill $1 -STOP

  elif [[ "$CMD" == "start" ]]; then

    CLUSTER=0
    TAIL_STDOUT=0
    while getopts "ct" F; do
      case $F in
        "c" )
          CLUSTER=1
          ;;
        "t" )
          TAIL_STDOUT=1
          ;;
      esac
    done
    # Strip off optional arguments
    shift $((OPTIND-1))
    if [[ "$#" -lt 1 ]]; then
      echo "usage: $0 remote start [options] HOST [FILE ...] < CMDS" 1>&2
      echo "options:" 1>&2
      echo "  -c   HOST specifies cluster file, not single hostname." 1>&2
      echo "  -t   Tail stdout of launched job." 1>&2
      exit -1
    fi
    RemoteJobStart $@

  elif [[ "$CMD" == "status" ]]; then

    if [[ "$#" -lt 1 ]]; then
      echo "usage: $0 remote status JOB-ID [...]" 1>&2
      exit -1
    fi
    for F in $@; do
      (echo "cd ../.."
       echo "gjob local status $F"
      ) | RemoteJobCommand $F
    done

  elif [[ "$CMD" == "unpause" ]]; then

    if [[ "$#" -lt 1 ]]; then
      echo "usage: $0 remote unpause JOB-ID" 1>&2
      exit -1
    fi
    RemoteJobKill $1 -CONT

  else
    (
    if [[ "$CMD" != "" ]]; then
      echo "Unknown command: $CMD"
    fi
    echo "usage $0 remote CMD"
    echo "where CMD is one of"
    echo
    echo "  cmd -- Run a command remotely on a worker node."
    echo
    echo "  is-paused -- Determine if a remote job is currently paused."
    echo
    echo "  kill -- Stop (not pause) a job running on a remote compute node."
    echo
    echo "  pause -- Pause a job running on a remote compute node."
    echo
    echo "  start -- Launch a new job on a remote compute node."
    echo
    echo "  status -- Get the status of a job on a remote compute node."
    echo
    echo "  unpause -- Resume a paused job on a remote compute node."
    echo
    ) 1>&2
    exit -1
  fi

else

  if [[ "$GROUP" != "" ]]; then
    echo "Unknown command group: $GROUP" 1>&2
  fi
  echo "usage: $0 [local|remote] CMD" 1>&2
  exit -1

fi
