#!/usr/bin/python

from glimpse import util, core
from glimpse.util import kernel
import Image
import math
import numpy as np
from scipy.ndimage.filters import convolve, maximum_filter

from time import time

def ReadImage(fname):
  img_obj = Image.open("images/dog.jpg").convert("L")
  img = util.ImageToArray(img_obj).astype(np.float) / 255
  return img

def ProcessRetina(img, kwidth):
  mean_kernel = np.ones([kwidth, kwidth])
  mean_kernel /= mean_kernel.size
  m = convolve(img, mean_kernel)
  v = convolve(img**2, mean_kernel) - convolve(img, mean_kernel)**2
  v_min = v.min()
  if v_min < 0:
    v -= v_min
  r = (img - m) / (np.sqrt(v) + 1)
  return r

def Normalize(data):
  # Scale vector norm of given array to unity.
  data /= math.sqrt(np.sum(data**2))
  return data

def MakeS1Kernels(kwidth):
  kernels = kernel.MakeGaborKernels(kwidth = kwidth)
  map(Normalize, kernels.reshape((-1,) + kernels.shape[-2:]))
  return kernels

def _ProcessSimpleLayer(idata, kernels, beta):
  """Apply S-unit processing to input data.
  idata - (3D array) input data
  kernels - (4D array) set of (3D) kernels"""

  assert(len(idata.shape) == 3)
  assert(len(kernels.shape) == 4)
  
  nkernels = kernels.shape[0]
  kshape = kernels.shape[1:]
  
  c = np.empty((nkernels,) + idata.shape[-2:])
  # Get local vector norms -- i.e., "n[j,k]" contains the vector norm of the 
  # 3d neighborhood about spatial location (j,k).
  n = np.sqrt(convolve(idata**2, np.ones(kshape)).sum(0))
  
  temp = np.empty(idata.shape)
  for i in range(nkernels):
    convolve(idata, kernels[i], output = temp)
    temp.sum(0, out = c[i])
  s = np.exp(-2 * beta * (1 - c / n))
  return s

def ProcessS1(r, s1_kernels, s1_beta):
  flat_r = r.reshape((-1,) + r.shape[-2:])
  flat_s1_kernels = s1_kernels.reshape((-1, 1) + s1_kernels.shape[-2:])
  flat_s1 = _ProcessSimpleLayer(flat_r, flat_s1_kernels, s1_beta)
  s1 = flat_s1.reshape(s1_kernels.shape[:-2] + flat_s1.shape[-2:])
  return s1

def ProcessS2(c1, s2_kernels, s2_beta):
  flat_s2 = _ProcessSimpleLayer(c1, s2_kernels, s2_beta)
  s2 = flat_s2.reshape((s2_kernels.shape[0],) + flat_s2.shape[-2:])
  return s2

def MakeS2Kernels(nkernels, kshape):
  s2_kernels = np.empty((nkernels,) + tuple(kshape))
  for k in s2_kernels:
    k[:] = np.random.normal(0, 0.15, kshape)
    Normalize(k)
  return s2_kernels

def ProcessComplexLayer(indata, kshape):
  result = maximum_filter(indata, kshape)
  return result

def Whiten(data):
  # Scale vector norm of every spatial location of array to unity.
  data /= np.sqrt((data**2).sum(0))
  return data

def ProcessC1(s1, kwidth):
  result = ProcessComplexLayer(s1, [1, 2, kwidth, kwidth]).max(1)
  print "result.shape:", result.shape
  Whiten(result)
  return result

def ProcessC2(s2, kwidth):
  result = s2.reshape((s2.shape[0], -1)).max(1)
  print "result.shape:", result.shape
  return result

def main():
  img_fname = "images/dog.jpg"
  result_dir = "results"
  r_kwidth = 15
  s1_beta = 1.0
  s1_kwidth = 11
  c1_kwidth = 5
  s2_nkernels = 10
  s2_kwidth = 7
  s2_beta = 1.0
  c2_kwidth = 3
  
  img = r = s1 = c1 = s2 = c2 = None
  
  def store(obj, name):
    print "Storing %s layer" % name
    util.Store(obj, result_dir + "/" + name)
  
  print "Image Layer"
  img = ReadImage(img_fname)
  store(img, "img")

  print "Retinal Layer"
  r = ProcessRetina(img, 15)
  store(r, "r")

  print "S1 Layer"
  s1_kernels = MakeS1Kernels(s1_kwidth)
  store(s1_kernels, "s1-kernels")
  s1 = ProcessS1(r, s1_kernels, s1_beta)
  store(s1, "s1")

  print "C1 Layer"
  c1 = ProcessC1(s1, c1_kwidth)
  store(c1, "c1")

#  return

  print "S2 Layer"
  s2_kshape = (c1.shape[0], s2_kwidth, s2_kwidth)
  
  print "s2_kshape:", s2_kshape
  
  s2_kernels = MakeS2Kernels(s2_nkernels, s2_kshape)
  store(s2_kernels, "s2-kernels")
  s2 = ProcessS2(c1, s2_kernels, s2_beta)
  store(s2, "s2")

  print "C2 Layer"
  c2 = ProcessC2(s2, c2_kwidth)
  store(c2, "c2")

if __name__ == '__main__':
  main()
