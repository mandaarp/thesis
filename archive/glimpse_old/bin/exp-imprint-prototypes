#!/bin/bash

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Imprints some number of prototypes for an experiment, based on an existing
# corpus split.
# Reads: training set from RESULT_DIR/splits
# Writes: prototypes to RESULT_DIR/s2.protos
#

set -e

#~ IMPRINT_ARGS=
#~ NUM_PROTOTYPES=
#~ RESULT_DIR=
: ${NUM_PROCS:=4}
: ${GLIMPSE_MODEL:=default}

if [[ "$#" -lt 3 ]]; then
  echo "usage: $0 NUM_PROTOS CORPUS-DIR RESULT-DIR" 1>&2
  exit -1
fi

D=$(dirname $0)
NUM_PROTOTYPES=$1
CORPUS_DIR=$2
RESULT_DIR=$3

if [[ ! -d "$RESULT_DIR/splits" ]]; then
  echo "Missing split information" 1>&2
  exit -1
fi
TRAIN_FILES=$(cat $RESULT_DIR/splits/train-*.files)

# At most, we need only one image per prototype.
NUM_IMAGES=$(echo $TRAIN_FILES | wc -w)
if [[ "$NUM_PROTOTYPES" < "$NUM_IMAGES" ]]; then
  TRAIN_FILES=$(cat $RESULT_DIR/splits/train-*.files | shuf | head -n $NUM_PROTOTYPES)
  NUM_IMAGES=$(echo $TRAIN_FILES | wc -w)
fi

# Compute the number of prototypes to imprint from each image.
PROTOS_PER_IMG=$(echo "scale=0; $NUM_PROTOTYPES / $NUM_IMAGES" | bc)
BCFUNCS=$(cat <<EOF
  scale=10
  define int(x) { auto savescale; savescale = scale; scale = 0; result = x/1; scale = savescale; return result }
  define ceil(x) { if (x>0) { if (x-int(x)>0) return int(x)+1 else return int(x) } else return -floor(-x) }
EOF
)
PROTOS_PER_IMG_CEIL=$(echo -e "$BCFUNCS \n ceil($NUM_PROTOTYPES / $NUM_IMAGES)" | bc)

PROTOTYPE_FILE=$RESULT_DIR/s2.protos
# Imprint prototypes from training set
(for F in $TRAIN_FILES; do
  echo $CORPUS_DIR/$F
done \
| $D/multi-launch -n $NUM_PROCS $D/glimpse -m $GLIMPSE_MODEL \
  imprint -s -n $PROTOS_PER_IMG_CEIL $IMPRINT_ARGS \
| $D/np-concat -s > $PROTOTYPE_FILE)

if [[ "$PROTOS_PER_IMG" != "$PROTOS_PER_IMG_CEIL" ]]; then
  # Imprinted too many prototypes. Remove the extra.
  codex -o p -c "o[:$NUM_PROTOTYPES]" $PROTOTYPE_FILE > $PROTOTYPE_FILE.tmp
  mv $PROTOTYPE_FILE.tmp $PROTOTYPE_FILE
fi
