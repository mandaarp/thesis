#!/usr/bin/env python

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage terms.

from glimpse import util
import math
import numpy
import numpy as np
import os
import sys

o = None
annotations = None

def main():
  global o  # Make the array object globally accessible, in case this script is
            # run through ipython.
  global annotations
  opts, args = util.GetOptions("a:bc:f:o:p:s:S:t:")
  cmd = None
  colorbar = False
  flatten_method = 'c'
  options = None
  save_path = None
  size = None
  plot_cmd = None
  title = None
  for opt,arg in opts:
    if opt == '-a':
      annotations = util.Load(arg)
    elif opt == '-b':
      colorbar = True
    elif opt == '-c':
      cmd = arg
    elif opt == '-f':
      if arg in "cs":
        flatten_method = arg
      else:
        raise util.UsageException("Bad flatten option: %s" % (arg,))
    elif opt == '-o':
      options = dict([ [ y.strip() for y in x.split("=") ] for x in arg.split(",") ])
    elif opt == '-p':
      plot_cmd = arg
    elif opt == '-s':
      save_path = arg
    elif opt == '-S':
      size = map(float, arg.split(","))
      assert len(size) == 2
    elif opt == '-t':
      title = arg
  if len(args) < 1:
    # raise util.UsageException("Missing filename of pickled array")
    ifname = sys.stdin
  else:
    ifname = args[0]
  o = util.Load(ifname)
  if cmd != None:
    o = eval(cmd)
  o = util.ToArray(o)
  print "Array shape: %s" % (o.shape,)
  print "Array stats (min, max, mean):", o.min(), o.max(), o.mean()
  # Try to show array as matplotlib plot, using Image-based display as a backup.
  if PlotArray(o, save_path, annotations, options, colorbar, size, plot_cmd,
      title):
    return o
  # Failed to display using matplotlib, so show as image.
  if flatten_method == 's':
    o.shape = (-1,) + o.shape[-2:]
    o = o.sum(0)
  else:
    # Make a copy, to be sure we can reshape
    o = o.copy()
    o.shape = (-1, o.shape[-1])
  img = util.ArrayToGreyscaleImage(o)
  if save_path == None:
    # path = os.path.basename(ifname) + ".jpg"
    path = "test.jpg"
    img.show(path)
  else:
    img.save(save_path)
  return o

def PlotArray(o, fname = None, annotations = None, options = None,
    colorbar = False, size = None, plot_cmd = None, title = None):
  if options == None:
    options = {}
  try:
    ndims = len(o.shape)
    if ndims == 1:
      raise util.UsageException("Input array must have at least 2 dimensions")
    if ndims == 2:
      o = o.reshape((1,) + o.shape)
    elif ndims > 3:
      o = o.reshape((-1,) + o.shape)
    pyplot = util.InitPlot(fname != None)
    from glimpse.util import gplot
    if annotations != None:
      annotations = annotations.reshape((-1,) + annotations.shape[-2:])
    from matplotlib import cm
    options = dict([ (k, eval(v)) for k, v in options.items() ])
    # options = util.MergeDict(options, cmap = cm.Reds)
#    if colorbar:
#      options['cols'] = 5
    if fname != None:
      options['show'] = False
    gplot.Show3DArray(o, annotations, colorbar = colorbar, **options)
    if title != None:
      pyplot.suptitle(title)
    if plot_cmd != None:
      exec plot_cmd
    if fname == None:
      pyplot.show()
    else:
      if size != None:
        f = pyplot.figure(1)
        f.set_figwidth(size[0])
        f.set_figheight(size[1])
      pyplot.savefig(fname)
    return True
  except ImportError, e:
    print e
    return False

if __name__ == '__main__':
  try:
    o = main()
  except util.UsageException, e:
    if e.msg:
      print >>sys.stderr, e.msg
    util.Usage("[options] ARRAY.pickle\n" + \
        "    -a     Annotations to show along-side the array(s) -- requires\n"
        "           matplotlib\n"
        "    -b     Show colorbars\n"
        "    -c     Command to run before showing array\n"
        "    -f     Method for flattening array (i.e., combining dimensions\n"
        "           for ND arrays, where N > 2).\n"
        "           One of 'c'oncatenate or 's'um.\n"
        "    -o     Extra options for the plotting command\n"
        "    -p     Command to run after creating plot\n"
        "    -s     Path to save image, instead of displaying it on screen\n"
        "    -S     Size of figure in inches, given as X,Y"
    )

