#!/bin/bash

# Copyright (c) 2011 Mick Thomure
# All rights reserved.
#
# Please see the file COPYING in this distribution for usage
# terms.

#
# Control logic for experiment helper script at rc/example-experiment.sh
# Reads from the following environment variables:
#   CORPUS_DIR NUM_PROTOTYPES PROTOTYPE_FILE PROPAGATE_HEAT
#   RESULT_DIR IMPRINT_ARGS TRANSFORM_ARGS SVM_ARGS PROPAGATE_ARGS
#

set -e

if [[ "$#" -lt 2 ]]; then
  echo "usage: $0 CORPUS-DIR RESULT-DIR" 1>&2
  exit -1
fi

D=$(dirname $0)
CORPUS_DIR=$1
RESULT_DIR=$2
: ${RANDOM_PROTO_TYPE:=histogram}

if [[ "$NUM_PROCS" == "" ]]; then
  # Match number of threads to available cores.
  export NUM_PROCS=$($D/get-num-cores)
  if [[ $NUM_PROCS == 8 ]]; then
    # Only run four threads on a Core 2 quad (e.g., steens)
    NUM_PROCS=4
  elif [[ $NUM_PROCS == 16 ]]; then
    # Scale back num threads on Bart's research machines.
    NUM_PROCS=12
  fi
fi

echo "CORPUS: $CORPUS_DIR"

if [[ "$NUM_PROTOTYPES" != "" ]]; then
  # Imprint new prototypes
  if [[ ! -d "$RESULT_DIR/splits" ]]; then
    echo "IMPRINT_SPLIT: random"
    $D/exp-make-splits $CORPUS_DIR $RESULT_DIR
  else
    echo "IMPRINT_SPLIT: manual"
  fi
  echo "+ Imprinting prototypes"
  export IMPRINT_ARGS
  $D/exp-imprint-prototypes $NUM_PROTOTYPES $CORPUS_DIR $RESULT_DIR
  if [[ "$NUM_RANDOM_PROTOTYPES" != "" ]]; then
    mv $RESULT_DIR/{s2.protos,sample.protos}
    echo "PROTOTYPE_SOURCE: random"
    if [[ "$RANDOM_PROTO_TYPE" == "histogram" ]]; then
      echo "+ Generating random prototypes from distribution of imprinted prototypes"
      $D/make-random-kernels -a h -n $NUM_RANDOM_PROTOTYPES -f $RESULT_DIR/sample.protos > $RESULT_DIR/s2.protos
    elif [[ "$RANDOM_PROTO_TYPE" == "shuffle" ]]; then
      echo "+ Generating random prototypes by shuffling imprinted prototypes"
      $D/make-random-kernels -a s -n $NUM_RANDOM_PROTOTYPES -f $RESULT_DIR/sample.protos > $RESULT_DIR/s2.protos
    else
      echo "Error: Unknown RANDOM_PROTO_TYPE ($RANDOM_PROTO_TYPE)" 1>&2
      exit -1
    fi
  else
    echo "PROTOTYPE_SOURCE: imprint"
  fi
elif [[ "$PROTOTYPE_FILE" != "" ]]; then
  # Copy existing prototypes
  echo "PROTOTYPE_SOURCE: manual"
  echo "+ Copying prototype file from: $PROTOTYPE_FILE"
  if [[ -f $RESULT_DIR/s2.protos ]]; then
    C=$(diff "$PROTOTYPE_FILE" $RESULT_DIR/s2.protos)
    if [[ "$C" != "" ]]; then
      cp "$PROTOTYPE_FILE" $RESULT_DIR/s2.protos
    fi
  else
    cp "$PROTOTYPE_FILE" $RESULT_DIR/s2.protos
  fi
  # Check for splits directory
  if [[ ! -d "$RESULT_DIR/splits" ]]; then
    echo "Choosing train/test splits randomly"
    $D/exp-make-splits $CORPUS_DIR $RESULT_DIR
  else
    echo "Using existing train/test splits"
  fi
else
  echo "WARN: no S2 prototypes present/generated. Transform may fail."
#  echo "Must specify either NUM_PROTOTYPE or PROTOTYPE_FILE" 1>&2
#  exit -1
fi

echo "+ Transforming images in corpus"
export TRANSFORM_ARGS SVM_ARGS
$D/exp-transform-corpus "$CORPUS_DIR" "$RESULT_DIR"

# Try to print number of features passed to classifier
CLS_LIST=( $(cat $RESULT_DIR/classes) )
FILE=$RESULT_DIR/data/$( head -n 1 $RESULT_DIR/${CLS_LIST[0]}.files )/feature-vector
if [[ -f "$FILE" ]]; then
  NUM_FEATURES=$( codex -c 'len(obj)' $FILE )
  echo "NUM_FEATURES: $NUM_FEATURES"
fi

if [[ "$SVM" == 1 ]]; then
  echo "+ Computing SVM accuracy for existing splits"
  NUM_CLS=${#CLS_LIST[@]}
  if [[ "$NUM_CLS" == 2 ]]; then
    $D/exp-svm-for-splits "$RESULT_DIR"
  else
    $D/exp-svm-multi-for-splits "$RESULT_DIR"
  fi
fi

if [[ "$SVM_CROSSVAL" == 1 ]]; then
  echo "+ Computing cross-validated SVM accuracy"
  $D/exp-svm-crossval "$RESULT_DIR"
fi

echo "Finished successfully"
